using System;
using UnityEngine;

public enum VulnerabilityType
{
  BufferOverflow,
  SQLInjection,
  RemoteCodeExecution,
  PrivilegeEscalation,
  DenialOfService,
  Authentication,
  Misconfiguration
}

public class Vulnerability
{
  public string CVE { get; private set; }
  public string Name { get; private set; }
  public VulnerabilityType Type { get; private set; }
  public int Severity { get; private set; } // 1-10
  public string Description { get; private set; }
  public SoftwareVersion AffectedVersionMin { get; private set; }
  public SoftwareVersion AffectedVersionMax { get; private set; }
  public string ExploitCommand { get; private set; }

  public Vulnerability(string cve, string name, VulnerabilityType type, int severity,
                  string description, string minVer, string maxVer, string exploitCmd)
  {
    CVE = cve;
    Name = name;
    Type = type;
    Severity = severity;
    Description = description;

    // Safe version parsing
    try
    {
      AffectedVersionMin = new SoftwareVersion(minVer);
    }
    catch (Exception)
    {
      // Default to a very old version if parsing fails
      AffectedVersionMin = new SoftwareVersion("0.0");
      Debug.LogWarning($"Invalid min version format for {cve}: {minVer}");
    }

    try
    {
      AffectedVersionMax = new SoftwareVersion(maxVer);
    }
    catch (Exception)
    {
      // Default to a very high version if parsing fails
      AffectedVersionMax = new SoftwareVersion("999.999");
      Debug.LogWarning($"Invalid max version format for {cve}: {maxVer}");
    }

    ExploitCommand = exploitCmd;
  }

  public bool AffectsSoftware(Software software)
  {
    return software.Version >= AffectedVersionMin && software.Version <= AffectedVersionMax;
  }
}
